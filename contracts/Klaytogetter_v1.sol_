// Klaytn IDE uses solidity 0.4.24, 0.5.6 versions.
pragma solidity >=0.4.24 <=0.5.6;
/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address public owner;

    /**
      * @dev The Ownable constructor sets the original `owner` of the contract to the sender
      * account.
      */
    constructor() public {
        owner = msg.sender;
    }

    /**
      * @dev Throws if called by any account other than the owner.
      */
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    /**
    * @dev Allows the current owner to transfer control of the contract to a newOwner.
    * @param newOwner The address to transfer ownership to.
    */
    function transferOwnership(address newOwner) public onlyOwner {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
}

contract KlayTogetter is Ownable{
    using SafeMath for uint256;

    struct Member{
        string kakaoId;
        address memberAddress;
    }

    struct Nest{
        address opener;
        string nestName;
        uint8 eggCnt;
        uint8 paymentSeq;
        uint256 amount;
        uint8 period;
        uint8 rate;
        uint256 joinAmount;
        uint256 createDate;
        uint256 depositDate;
        uint256 PaymentDate;
    }

    struct NestEggsInfo{
        uint256 memberId;
        uint8 seq;
    }

    Member[] public members;
    Nest[] public nests;
    NestEggsInfo[] public nestEggsInfos;

    mapping(address => uint256) memberMapping;
    mapping(address => uint256[]) nestMemberMapping;
    mapping(uint256 => uint256[]) nestEggsMapping;

    event createNestEvent(address _addr,uint256 sendValue);
    event _joinNestEvent(address _addr);
    event joinNestEvent(uint256 joinAmount,uint256 sendValue);

    function createMember(string _kakaoId,address _address) external {
        require(memberMapping[_address] == 0,"already exist id");
        uint256 memberId = members.push(Member(_kakaoId, _address));
        memberMapping[_address] = memberId;

    }
    function createNest(string _nestName,uint8 _eggCnt, uint256 _amount,uint8 _period, uint8 _rate,uint8 _turn)
    payable external {
        require(msg.value > 0,"give me money");
        emit createNestEvent(msg.sender,msg.value);

        Nest memory nest = Nest(msg.sender,_nestName,_eggCnt,0,_amount,_period, _rate,msg.value,now,0,0);
        uint256 nestId = nests.push(nest)-1;
        _joinNest(nestId,_turn);
    }

    function _joinNest(uint256 _nestId,uint8 _turn) internal {
        emit _joinNestEvent(msg.sender);

        uint nestEggsInfoId = nestEggsInfos.push(NestEggsInfo({memberId:memberMapping[msg.sender],seq:_turn}))-1;
        nestEggsMapping[_nestId].push(nestEggsInfoId)-1;
        nestMemberMapping[msg.sender].push(_nestId)-1;

    }
    function joinNest(uint256 _nestId,uint8 _turn) payable external{
        require(msg.value > 0,"give me money");
        //same address can not join
        for(uint i=0;i<nestMemberMapping[msg.sender].length;i++){
            uint256 nestId = nestMemberMapping[msg.sender][i];
            require(_nestId!=nestId,'already join nest');
        }

        nests[_nestId].joinAmount.add(msg.value);
        emit joinNestEvent(nests[_nestId].joinAmount,msg.value);
        _joinNest(_nestId,_turn);
    }
    //지급 function
    //순번 이율에 따른 지급
    // function payment(uint256 _nestId) external onlyOwner{
    //     uint256 seq = nests[_nestId].paymentSeq;

    // }

    function getMemberNestIdArray() public view returns (uint256[]){
        return nestMemberMapping[msg.sender];
    }

    function getNestMemberIdArray(uint256 _nestId) public view returns (uint256[]){
        return nestEggsMapping[_nestId];
    }

    function getBalance() public view returns (uint) {
        return address(this).balance;
    }

    function getMemberId() public view returns(uint256){
        return memberMapping[msg.sender];
    }

    function getNestLength() public view returns(uint256){
        return nests.length;
    }

    function getMemberLength() public view returns(uint256){
        return members.length;
    }

    function connectionTest() public pure returns(string){
        return "OK";
    }


}
